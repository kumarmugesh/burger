#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <map>
using namespace std;

int main() {
    // input data
    int n; // number of days (restaurants)
    cin>>n;
    int x[n], a[n], b[n]; // Xi, Ai, Bi
    map<int, int> posmap; // Xi -> i
    for (int i = 0; i < n; ++i) {
        cin>>x[i]>>a[i]>>b[i];
        posmap[x[i]] = i;
    }
    // process data
    int p[n], pid = 0; // position i (ascend)
    for (auto it = posmap.begin(); it != posmap.end(); ++it) {
        p[pid] = it->second; // no.i restaurant is (it->second)
        x[it->second] = pid; // record i restaurant position in p[]
        ++pid;
    }
    // find optimal
    vector<int> opt = {a[0]};
    vector<int> cost(n, 0);
    for (int r = 1; r < n; ++r) {
        int maxr = 0;
        // calculate cost to r
        cost[x[r]] = 0;
        for (int e = x[r] - 1; e >=0; --e) {
            cost[e] = cost[e + 1];
            if (p[e] <= r) cost[e] += b[p[e]];
        }
        for (int e = x[r] + 1; e < n; ++e) {
            cost[e] = cost[e - 1];
            if (p[e] <= r) cost[e] += b[p[e]];
        }
        //for (int i = 0; i < n; ++i) cout<<cost[i]<<' ';
        //cout<<endl;
        for (int i = 0; i < opt.size(); ++i) {
            if (opt[i] <= 0) continue;
            maxr = max(opt[i] - cost[x[i]], maxr);
        }
        opt.push_back(maxr + a[r]);
        //for (int i = 0; i < opt.size(); ++i) cout<<opt[i]<<' ';
        //cout<<endl;
    }
    int res = 0;
    for (int i = 0; i < opt.size(); ++i) res = max(res, opt[i]);
    cout<<res<<endl;
    return 0;
}
